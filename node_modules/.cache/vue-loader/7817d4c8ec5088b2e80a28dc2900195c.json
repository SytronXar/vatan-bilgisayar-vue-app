{"remainingRequest":"C:\\Users\\Slyleight\\Desktop\\Vatan-vue-güncellen\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Slyleight\\Desktop\\Vatan-vue-güncellen\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Slyleight\\Desktop\\Vatan-vue-güncellen\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Slyleight\\Desktop\\Vatan-vue-güncellen\\src\\components\\Comments.vue?vue&type=template&id=5847e424&","dependencies":[{"path":"C:\\Users\\Slyleight\\Desktop\\Vatan-vue-güncellen\\src\\components\\Comments.vue","mtime":1604857958491},{"path":"C:\\Users\\Slyleight\\Desktop\\Vatan-vue-güncellen\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604854070296},{"path":"C:\\Users\\Slyleight\\Desktop\\Vatan-vue-güncellen\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1604854121388},{"path":"C:\\Users\\Slyleight\\Desktop\\Vatan-vue-güncellen\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604854070296},{"path":"C:\\Users\\Slyleight\\Desktop\\Vatan-vue-güncellen\\node_modules\\vue-loader\\lib\\index.js","mtime":1604854121374}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}