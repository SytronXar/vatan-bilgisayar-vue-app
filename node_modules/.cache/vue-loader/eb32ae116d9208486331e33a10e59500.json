{"remainingRequest":"C:\\Users\\Slyleight\\Desktop\\another-one-vatan\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Slyleight\\Desktop\\another-one-vatan\\src\\components\\productImagenInfo.vue?vue&type=template&id=6595ac30&","dependencies":[{"path":"C:\\Users\\Slyleight\\Desktop\\another-one-vatan\\src\\components\\productImagenInfo.vue","mtime":1604930097975},{"path":"C:\\Users\\Slyleight\\Desktop\\another-one-vatan\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604927871814},{"path":"C:\\Users\\Slyleight\\Desktop\\another-one-vatan\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1604927908700},{"path":"C:\\Users\\Slyleight\\Desktop\\another-one-vatan\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604927871814},{"path":"C:\\Users\\Slyleight\\Desktop\\another-one-vatan\\node_modules\\vue-loader\\lib\\index.js","mtime":1604927908697}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}