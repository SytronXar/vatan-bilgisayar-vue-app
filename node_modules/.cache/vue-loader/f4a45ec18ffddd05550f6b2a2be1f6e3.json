{"remainingRequest":"C:\\Users\\Slyleight\\Desktop\\vatan-bilgisayar-vue-app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Slyleight\\Desktop\\vatan-bilgisayar-vue-app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Slyleight\\Desktop\\vatan-bilgisayar-vue-app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Slyleight\\Desktop\\vatan-bilgisayar-vue-app\\src\\components\\CategoryDropbar.vue?vue&type=template&id=73e7fae6&","dependencies":[{"path":"C:\\Users\\Slyleight\\Desktop\\vatan-bilgisayar-vue-app\\src\\components\\CategoryDropbar.vue","mtime":1604487528000},{"path":"C:\\Users\\Slyleight\\Desktop\\vatan-bilgisayar-vue-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604487528000},{"path":"C:\\Users\\Slyleight\\Desktop\\vatan-bilgisayar-vue-app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1604487528000},{"path":"C:\\Users\\Slyleight\\Desktop\\vatan-bilgisayar-vue-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604487528000},{"path":"C:\\Users\\Slyleight\\Desktop\\vatan-bilgisayar-vue-app\\node_modules\\vue-loader\\lib\\index.js","mtime":1604487528000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "wrapper-topbar-menu" }, [
    _c("div", { staticClass: "global-container" }, [
      _c("div", { staticClass: "row" }, [
        _c("div", { staticClass: "col-lg-12 col-md-12 col-sm-12 col-xs-12" }, [
          _c(
            "div",
            {
              staticClass: "navbar-collapse collapse",
              attrs: { id: "navbar" }
            },
            [
              _vm._m(0),
              _c("ul", { staticClass: "nav navbar-nav" }, [
                _c(
                  "li",
                  {
                    staticClass: "dropdown",
                    on: {
                      mouseenter: _vm.OpenDropdown,
                      mouseleave: _vm.CloseDropdown
                    }
                  },
                  [
                    _c(
                      "a",
                      {
                        staticClass: "nav-first-link",
                        attrs: { href: "/telefonlar/" }
                      },
                      [_vm._v("Telefon")]
                    ),
                    _vm._m(1)
                  ]
                ),
                _c(
                  "li",
                  {
                    staticClass: "dropdown",
                    on: {
                      mouseenter: _vm.OpenDropdown,
                      mouseleave: _vm.CloseDropdown
                    }
                  },
                  [
                    _c(
                      "a",
                      {
                        staticClass: "nav-first-link",
                        attrs: { href: "/bilgisayar/" }
                      },
                      [_vm._v("Bilgisayar")]
                    ),
                    _vm._m(2)
                  ]
                ),
                _c(
                  "li",
                  {
                    staticClass: "dropdown",
                    on: {
                      mouseenter: _vm.OpenDropdown,
                      mouseleave: _vm.CloseDropdown
                    }
                  },
                  [
                    _c(
                      "a",
                      {
                        staticClass: "nav-first-link",
                        attrs: { href: "/bilgisayar-bilesenleri/" }
                      },
                      [_vm._v("Bilgisayar Parçaları")]
                    ),
                    _vm._m(3)
                  ]
                ),
                _c(
                  "li",
                  {
                    staticClass: "dropdown",
                    on: {
                      mouseenter: _vm.OpenDropdown,
                      mouseleave: _vm.CloseDropdown
                    }
                  },
                  [
                    _c(
                      "a",
                      {
                        staticClass: "nav-first-link",
                        attrs: { href: "/fotograf-makinesi-video-kamera" }
                      },
                      [_vm._v("Kamera")]
                    ),
                    _vm._m(4)
                  ]
                ),
                _c(
                  "li",
                  {
                    staticClass: "dropdown",
                    on: {
                      mouseenter: _vm.OpenDropdown,
                      mouseleave: _vm.CloseDropdown
                    }
                  },
                  [
                    _c(
                      "a",
                      {
                        staticClass: "nav-first-link",
                        attrs: { href: "/tv-ev-elektronigi/" }
                      },
                      [_vm._v("Tv & Ev Elektroniği")]
                    ),
                    _vm._m(5)
                  ]
                ),
                _c(
                  "li",
                  {
                    staticClass: "dropdown",
                    on: {
                      mouseenter: _vm.OpenDropdown,
                      mouseleave: _vm.CloseDropdown
                    }
                  },
                  [
                    _c(
                      "a",
                      {
                        staticClass: "nav-first-link",
                        attrs: { href: "/ofis-malzemeleri/" }
                      },
                      [_vm._v("Ofis")]
                    ),
                    _vm._m(6)
                  ]
                ),
                _c(
                  "li",
                  {
                    staticClass: "dropdown",
                    on: {
                      mouseenter: _vm.OpenDropdown,
                      mouseleave: _vm.CloseDropdown
                    }
                  },
                  [
                    _c(
                      "a",
                      {
                        staticClass: "nav-first-link",
                        attrs: { href: "/aksesuarlar/" }
                      },
                      [_vm._v("Aksesuar")]
                    ),
                    _vm._m(7)
                  ]
                ),
                _c(
                  "li",
                  {
                    staticClass: "dropdown",
                    on: {
                      mouseenter: _vm.OpenDropdown,
                      mouseleave: _vm.CloseDropdown
                    }
                  },
                  [
                    _c(
                      "a",
                      {
                        staticClass: "nav-first-link",
                        attrs: { href: "/oyun-hobi" }
                      },
                      [_vm._v("Oyun & Hobi")]
                    ),
                    _vm._m(8)
                  ]
                ),
                _c(
                  "li",
                  {
                    staticClass: "dropdown",
                    on: {
                      mouseenter: _vm.OpenDropdown,
                      mouseleave: _vm.CloseDropdown
                    }
                  },
                  [
                    _c(
                      "a",
                      {
                        staticClass: "nav-first-link",
                        attrs: { href: "/elektrikli-ev-aletleri/" }
                      },
                      [_vm._v("Ev Aletleri")]
                    ),
                    _vm._m(9)
                  ]
                ),
                _c(
                  "li",
                  {
                    staticClass: "dropdown",
                    on: {
                      mouseenter: _vm.OpenDropdown,
                      mouseleave: _vm.CloseDropdown
                    }
                  },
                  [
                    _c(
                      "a",
                      {
                        staticClass: "nav-first-link",
                        attrs: { href: "/spor-aletleri/" }
                      },
                      [_vm._v("Spor & Outdoor")]
                    ),
                    _vm._m(10)
                  ]
                ),
                _vm._m(11),
                _vm._m(12),
                _vm._m(13),
                _vm._m(14),
                _vm._m(15),
                _vm._m(16),
                _vm._m(17),
                _vm._m(18)
              ])
            ]
          )
        ])
      ])
    ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "tree-links" }, [
      _c(
        "a",
        {
          staticClass: "topbar-menu__link",
          attrs: { href: "/firsat-urunler" }
        },
        [_c("span", { staticClass: "topbar-menu__text" }, [_vm._v("FIRSAT")])]
      ),
      _c(
        "a",
        {
          staticClass: "topbar-menu__link",
          attrs: { href: "/webeozel-urunler" }
        },
        [
          _c("span", { staticClass: "topbar-menu__text" }, [
            _vm._v("WEB'E ÖZEL")
          ])
        ]
      ),
      _c(
        "a",
        { staticClass: "topbar-menu__link", attrs: { href: "/yeni-urunler" } },
        [_c("span", { staticClass: "topbar-menu__text" }, [_vm._v("YENİ")])]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "dropdown-menu" }, [
      _c("div", { staticClass: "row" }, [
        _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
          _c("ul", { staticClass: "dropdown-menu-list go-back-wrapper" }, [
            _c("li", { staticClass: "dropdown-menu-list__item" }, [
              _c("a", { staticClass: "go-parent dropdown-menu-list__link" }, [
                _vm._v("Telefon")
              ])
            ])
          ]),
          _c("ul", { staticClass: "dropdown-menu-list" }, [
            _c("li", [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link",
                  attrs: { href: "/cep-telefonu-modelleri/" }
                },
                [_vm._v("Tüm Telefonlar")]
              )
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/cep-telefonu-modelleri/" }
                },
                [_vm._v("Cep Telefonları ")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Cep Telefonları ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/cep-telefonu-modelleri/" }
                          },
                          [_vm._v("Tüm Cep Telefonları")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/apple/cep-telefonu-modelleri/" }
                          },
                          [_vm._v("Apple")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/general-mobile/cep-telefonu-modelleri/"
                            }
                          },
                          [_vm._v("General Mobile ")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/honor/cep-telefonu-modelleri/" }
                          },
                          [_vm._v("Honor")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/huawei/cep-telefonu-modelleri/" }
                          },
                          [_vm._v("Huawei")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/oppo/cep-telefonu-modelleri/" }
                          },
                          [_vm._v("Oppo")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/realme/cep-telefonu-modelleri/" }
                          },
                          [_vm._v("Realme")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/reeder/cep-telefonu-modelleri/" }
                          },
                          [_vm._v("Reeder")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/samsung/cep-telefonu-modelleri/" }
                          },
                          [_vm._v("Samsung")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/vestel/cep-telefonu-modelleri/" }
                          },
                          [_vm._v("Vestel")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/xiaomi/cep-telefonu-modelleri/" }
                          },
                          [_vm._v("Xiaomi")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/vivo/cep-telefonu-modelleri/" }
                          },
                          [_vm._v("Vivo")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/tabletler/" }
                },
                [_vm._v("Tabletler")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Tabletler ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/tabletler/" }
                          },
                          [_vm._v("Tüm Tabletler")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/apple/tabletler/" }
                          },
                          [_vm._v("Apple")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/everpad/tabletler/" }
                          },
                          [_vm._v("Everpad")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/huawei/tabletler/" }
                          },
                          [_vm._v("Huawei")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/lenovo/tabletler/" }
                          },
                          [_vm._v("Lenovo")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/samsung/tabletler/" }
                          },
                          [_vm._v("Samsung")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/akilli-saatler/" }
                },
                [_vm._v("Akıllı Saatler ")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Akıllı Saatler ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/akilli-saatler/" }
                          },
                          [_vm._v("Tüm Akıllı Saatler")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/alcatel/akilli-saatler/" }
                          },
                          [_vm._v("Alcatel")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/apple/akilli-saatler/" }
                          },
                          [_vm._v("Apple")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/honor/akilli-saatler/" }
                          },
                          [_vm._v("Honor")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/huawei/akilli-saatler/" }
                          },
                          [_vm._v("Huawei")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/samsung/akilli-saatler/" }
                          },
                          [_vm._v("Samsung")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/xiaomi/akilli-saatler/" }
                          },
                          [_vm._v("Xiaomi")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/telefon-kiliflari/" }
                },
                [_vm._v("Telefon Kılıfları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/ekran-koruyucu/" }
                },
                [_vm._v("Ekran Koruyucular ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/tablet-kiliflari/" }
                },
                [_vm._v("Tablet Kılıfları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/bluetooth-kulaklik/" }
                },
                [_vm._v("Bluetooth Ürünleri")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/kablosuz-telefon-modelleri/" }
                },
                [_vm._v("Kablosuz Telefonlar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/tasinabilir-batarya/" }
                },
                [_vm._v("Taşınabilir Şarj Aletleri")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/bluetooth-kulaklik-mikrofon/" }
                },
                [_vm._v("Kulaklık ve Mikrofon")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/hafiza-karti/" }
                },
                [_vm._v("Hafıza Kartı ")]
              )
            ])
          ]),
          _c("div", { staticClass: "m-b-30 m-l-45" }, [
            _c(
              "a",
              {
                staticClass:
                  "btn btn-default btn-transparent btn-show-all-pc-product",
                attrs: { href: "/telefonlar" }
              },
              [_vm._v("Tüm Telefon Ürünlerini Gör")]
            ),
            _c(
              "a",
              {
                staticClass:
                  "btn btn-default btn-transparent btn-show-all-pc-product",
                staticStyle: { "margin-left": "15px" },
                attrs: { href: "/outlet/cep-telefonu-modelleri/" }
              },
              [_vm._v("Outlet Cep Telefonları")]
            )
          ])
        ]),
        _c("div", { staticClass: "col-lg-3 banner-list-wrapper" }, [
          _c("div", { staticClass: "banner-list" }, [
            _c("div", { staticClass: "banner-list__item" }, [
              _c("img", {
                staticClass: "lazyimg",
                attrs: {
                  "data-src":
                    "https://www.vatanbilgisayar.com/Upload/GENERAL/menu-banner/telefon.jpg",
                  src:
                    "https://www.vatanbilgisayar.com/Upload/GENERAL/menu-banner/telefon.jpg"
                }
              })
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "dropdown-menu" }, [
      _c("div", { staticClass: "row" }, [
        _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
          _c("ul", { staticClass: "dropdown-menu-list go-back-wrapper" }, [
            _c("li", { staticClass: "dropdown-menu-list__item" }, [
              _c("a", { staticClass: "go-parent dropdown-menu-list__link" }, [
                _vm._v("Bilgisayar")
              ])
            ])
          ]),
          _c("ul", { staticClass: "dropdown-menu-list" }, [
            _c("li", [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link",
                  attrs: { href: "/bilgisayar/" }
                },
                [_vm._v("Tüm Bilgisayarlar")]
              )
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/notebook/" }
                },
                [_vm._v("Notebook")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Notebooklar ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/notebook/" }
                          },
                          [_vm._v("Tüm Notebooklar")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/acer/notebook/" }
                          },
                          [_vm._v("Acer")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/apple/notebook/" }
                          },
                          [_vm._v("Apple")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/asus/notebook/" }
                          },
                          [_vm._v("Asus")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/dell/notebook/" }
                          },
                          [_vm._v("Dell")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/hometech/notebook/" }
                          },
                          [_vm._v("Hometech")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/hp/notebook/" }
                          },
                          [_vm._v("HP")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/lenovo/notebook/" }
                          },
                          [_vm._v("Lenovo")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/msi/notebook/" }
                          },
                          [_vm._v("MSI")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/microsoft/notebook/" }
                          },
                          [_vm._v("Microsoft")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/masaustu-bilgisayarlar/" }
                },
                [_vm._v("Masaüstü Bilgisayarlar")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Masaüstü Bilgisayarlar ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/masaustu-bilgisayarlar/" }
                          },
                          [_vm._v("Tüm Masaüstü Bilgisayarlar")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/acer/masaustu-bilgisayarlar/" }
                          },
                          [_vm._v("Acer")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/apple/masaustu-bilgisayarlar/" }
                          },
                          [_vm._v("Apple")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/asus/masaustu-bilgisayarlar/" }
                          },
                          [_vm._v("Asus")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/exper/masaustu-bilgisayarlar/" }
                          },
                          [_vm._v("Exper")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/hp/masaustu-bilgisayarlar/" }
                          },
                          [_vm._v("HP")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/lenovo/masaustu-bilgisayarlar/" }
                          },
                          [_vm._v("Lenovo")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/microsoft/masaustu-bilgisayarlar/"
                            }
                          },
                          [_vm._v("Microsoft")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/msi/masaustu-bilgisayarlar/" }
                          },
                          [_vm._v("MSI")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/tabletler/" }
                },
                [_vm._v("Tabletler")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Tabletler ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/tabletler/" }
                          },
                          [_vm._v("Tüm Tabletler")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/apple/tabletler/" }
                          },
                          [_vm._v("Apple")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/everpad/tabletler/" }
                          },
                          [_vm._v("Everpad")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/huawei/tabletler/" }
                          },
                          [_vm._v("Huawei")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/lenovo/tabletler/" }
                          },
                          [_vm._v("Lenovo")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/reeder/tabletler/" }
                          },
                          [_vm._v("Reeder")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/samsung/tabletler/" }
                          },
                          [_vm._v("Samsung")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/bilgisayar-bilesenleri/" }
                },
                [_vm._v("Bilgisayar Bileşenleri(OEM)")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Bilgisayar Bileşenleri(OEM) ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Tüm Bilgisayar Bileşenleri")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/a4-tech/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("A4 Tech ")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/amd/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("AMD")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/aoc/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("AOC")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/apple/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Apple")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/asus/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Asus")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/benq/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("BenQ")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/cooler-master/bilgisayar-bilesenleri/"
                            }
                          },
                          [_vm._v("Cooler Master ")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/corsair/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Corsair")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/cougar/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Cougar")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/crucial/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Crucial")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/dell/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Dell")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/everest/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Everest")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/evga/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Evga")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/frisby/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Frisby")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/gigabyte/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Gigabyte")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/gskill/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("GSKILL")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/hp/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("HP")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/inca/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("INCA")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/intel/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Intel")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/kingston/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Kingston")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/lenovo/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Lenovo")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/lg/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("LG")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/logitech/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Logitech")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/microsoft/bilgisayar-bilesenleri/"
                            }
                          },
                          [_vm._v("Microsoft")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/msi/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("MSI")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/ocz/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("OCZ")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/oem/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("OEM")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/philips/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Philips")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/pioneer/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Pioneer")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/rampage/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Rampage")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/razer/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Razer")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/samsung/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Samsung")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/sandisk/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Sandisk")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/sapphire/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Sapphire")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/seagate/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Seagate")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/s-link/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("S-link")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/thermaltake/bilgisayar-bilesenleri/"
                            }
                          },
                          [_vm._v("Thermaltake")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/toshiba/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Toshiba")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/transcend/bilgisayar-bilesenleri/"
                            }
                          },
                          [_vm._v("Transcend")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/trust/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Trust")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/viewsonic/bilgisayar-bilesenleri/"
                            }
                          },
                          [_vm._v("Viewsonic")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/wd/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("WD")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/xigmatek/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Xigmatek")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/zalman/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Zalman")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/zotac/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Zotac")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/oyun-bilgisayari" }
                },
                [_vm._v("Oyun Bilgisayarı ")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Oyun Bilgisayarı ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/oyun-bilgisayari" }
                          },
                          [_vm._v("Tüm Oyun Bilgisayarları")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/acer/oyun-bilgisayari/" }
                          },
                          [_vm._v("Acer")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/asus/oyun-bilgisayari/" }
                          },
                          [_vm._v("Asus")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/dell/oyun-bilgisayari/" }
                          },
                          [_vm._v("Dell")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/hp/oyun-bilgisayari/" }
                          },
                          [_vm._v("HP")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/lenovo/oyun-bilgisayari/" }
                          },
                          [_vm._v("Lenovo")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/msi/oyun-bilgisayari/" }
                          },
                          [_vm._v("Msi")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link",
                  attrs: { href: "/oem-hazir-sistemler/" }
                },
                [_c("strong", [_vm._v("OEM Hazır Sistemler")])]
              )
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/harici-diskler/" }
                },
                [_vm._v("Harici Diskler ")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Harici Diskler ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/harici-diskler/" }
                          },
                          [_vm._v("Tüm Harici Diskler")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/seagate/harici-diskler/" }
                          },
                          [_vm._v("Seagate")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/toshiba/harici-diskler/" }
                          },
                          [_vm._v("Toshiba")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/wd/harici-diskler/" }
                          },
                          [_vm._v("WD")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/bilgisayar-monitorleri/" }
                },
                [_vm._v("Monitörler")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/yazici/" }
                },
                [_vm._v("Yazıcılar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/network-urunleri/" }
                },
                [_vm._v("Network Ürünleri ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/modemler/" }
                },
                [_vm._v("Modemler")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/guvenlik-antivirus-yazilimlari/" }
                },
                [_vm._v("Güvenlik Yazılımları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/isletim-sistemleri/" }
                },
                [_vm._v("İşletim Sistemleri ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/microsoft-office/" }
                },
                [_vm._v("Microsoft Office Programları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/cantalar-kiliflar/" }
                },
                [_vm._v("Çanta ve Kılıflar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/notebook-stand-ve-sogutucular/" }
                },
                [_vm._v("Notebook Soğutucu")]
              )
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/bluetooth-kulaklik-mikrofon/" }
                },
                [_vm._v("Kulaklık ve Mikrofon")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Kulaklık ve Mikrofonlar ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/bluetooth-kulaklik-mikrofon/" }
                          },
                          [_vm._v("Tüm Kulaklık ve Mikrofonlar")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/apple/bluetooth-kulaklik-mikrofon/"
                            }
                          },
                          [_vm._v("Apple")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/asus/bluetooth-kulaklik-mikrofon/"
                            }
                          },
                          [_vm._v("Asus")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/beats/bluetooth-kulaklik-mikrofon/"
                            }
                          },
                          [_vm._v("Beats")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/hp/bluetooth-kulaklik-mikrofon/" }
                          },
                          [_vm._v("Hp")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/huawei/bluetooth-kulaklik-mikrofon/"
                            }
                          },
                          [_vm._v("Huawei")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/hypergear/bluetooth-kulaklik-mikrofon/"
                            }
                          },
                          [_vm._v("Hypergear")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/hyperx/bluetooth-kulaklik-mikrofon/"
                            }
                          },
                          [_vm._v("Hyperx")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/jabra/bluetooth-kulaklik-mikrofon/"
                            }
                          },
                          [_vm._v("Jabra")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/jbl/bluetooth-kulaklik-mikrofon/" }
                          },
                          [_vm._v("JBL")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/logitech/bluetooth-kulaklik-mikrofon/"
                            }
                          },
                          [_vm._v("Logitech")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/philips/bluetooth-kulaklik-mikrofon/"
                            }
                          },
                          [_vm._v("Philips")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/pioneer/bluetooth-kulaklik-mikrofon/"
                            }
                          },
                          [_vm._v("Pioneer")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/rampage/bluetooth-kulaklik-mikrofon/"
                            }
                          },
                          [_vm._v("Rampage")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/razer/bluetooth-kulaklik-mikrofon/"
                            }
                          },
                          [_vm._v("Razer")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/samsung/bluetooth-kulaklik-mikrofon/"
                            }
                          },
                          [_vm._v("Samsung")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/sbs/bluetooth-kulaklik-mikrofon/" }
                          },
                          [_vm._v("SBS")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/sennheiser/bluetooth-kulaklik-mikrofon/"
                            }
                          },
                          [_vm._v("Sennheiser")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/skypal/bluetooth-kulaklik-mikrofon/"
                            }
                          },
                          [_vm._v("Skypal")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/snopy/bluetooth-kulaklik-mikrofon/"
                            }
                          },
                          [_vm._v("Snopy")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/sony/bluetooth-kulaklik-mikrofon/"
                            }
                          },
                          [_vm._v("Sony")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/trust/bluetooth-kulaklik-mikrofon/"
                            }
                          },
                          [_vm._v("Trust")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/ttec/bluetooth-kulaklik-mikrofon/"
                            }
                          },
                          [_vm._v("Ttec")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ])
          ]),
          _c("div", { staticClass: "m-b-30 m-l-45" }, [
            _c(
              "a",
              {
                staticClass:
                  "btn btn-default btn-transparent btn-show-all-pc-product",
                attrs: { href: "/bilgisayar" }
              },
              [_vm._v("Tüm Bilgisayar Ürünlerini Gör ")]
            ),
            _c(
              "a",
              {
                staticClass:
                  "btn btn-default btn-transparent btn-show-all-pc-product",
                staticStyle: { "margin-left": "15px" },
                attrs: { href: "/outlet/notebook/" }
              },
              [_vm._v("Outlet Notebooklar")]
            )
          ])
        ]),
        _c("div", { staticClass: "col-lg-3 banner-list-wrapper" }, [
          _c("div", { staticClass: "banner-list" }, [
            _c("div", { staticClass: "banner-list__item" }, [
              _c("a", { attrs: { href: "/oem-hazir-sistemler/" } }, [
                _c("img", {
                  staticClass: "lazyimg",
                  attrs: {
                    "data-src":
                      "https://www.vatanbilgisayar.com/upload/banner/yeni-tasarim/kampanya-banner/oembanner2020-min.jpg",
                    src:
                      "https://www.vatanbilgisayar.com/upload/banner/yeni-tasarim/kampanya-banner/oembanner2020-min.jpg"
                  }
                })
              ])
            ]),
            _c("div", { staticClass: "banner-list__item" }, [
              _c("a", { attrs: { href: "/pc-toplama/" } }, [
                _c("img", {
                  staticClass: "lazyimg lazy-init",
                  attrs: {
                    "data-src":
                      "https://www.vatanbilgisayar.com/upload/banner/yeni-tasarim/anasayfa/pc-toplama.jpg",
                    src:
                      "https://www.vatanbilgisayar.com/upload/banner/yeni-tasarim/anasayfa/pc-toplama.jpg"
                  }
                })
              ])
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "dropdown-menu" }, [
      _c("div", { staticClass: "row" }, [
        _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
          _c("ul", { staticClass: "dropdown-menu-list go-back-wrapper" }, [
            _c("li", { staticClass: "dropdown-menu-list__item" }, [
              _c("a", { staticClass: "go-parent dropdown-menu-list__link" }, [
                _vm._v(" Bilgisayar Parçaları ")
              ])
            ])
          ]),
          _c("ul", { staticClass: "dropdown-menu-list" }, [
            _c("li", [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link",
                  attrs: { href: "/bilgisayar-bilesenleri/" }
                },
                [_vm._v("Tüm Bilgisayar Parçaları")]
              )
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/bilgisayar-bilesenleri/" }
                },
                [_vm._v("Tüm OEM Ürünleri")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm OEM Ürünleri ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Tüm Oem Ürünleri")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/a4-tech/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("A4-Tech")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/amd/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("AMD")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/aoc/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("AOC")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/apple/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Apple")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/asus/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Asus")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/benq/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("BenQ")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/cooler-master/bilgisayar-bilesenleri/"
                            }
                          },
                          [_vm._v("Cooler Master ")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/corsair/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Corsair")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/cougar/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Cougar")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/crucial/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Crucial")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/dell/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Dell")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/everest/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Everest")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/evga/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Evga")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/frisby/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Frisby")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/gigabyte/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Gigabyte")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/gskill/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Gskill")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/hp/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("HP")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/inca/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Inca")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/intel/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Intel")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/kingston/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Kingston")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/lenovo/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Lenovo")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/lg/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("LG")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/logitech/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Logitech")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/microsoft/bilgisayar-bilesenleri/"
                            }
                          },
                          [_vm._v("Microsoft")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/msi/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("MSI")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/ocz/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("OCZ")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/oem/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("OEM")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/philips/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Philips")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/pioneer/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Pioneer")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/rampage/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Rampage")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/razer/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Razer")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/samsung/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Samsung")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/sandisk/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Sandisk")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/sapphire/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Sapphire")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/seagate/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Seagate")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/s-link/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("S-Link")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/thermaltake/bilgisayar-bilesenleri/"
                            }
                          },
                          [_vm._v("Thermaltake")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/toshiba/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Toshiba")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass: "dropdown-menu-list__link",
                            attrs: {
                              href: "/transcend/bilgisayar-bilesenleri/",
                              "special-menu-link": ""
                            }
                          },
                          [_vm._v("Transcend")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/trust/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Trust")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/viewsonic/bilgisayar-bilesenleri/"
                            }
                          },
                          [_vm._v("Viewsonic")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/wd/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("WD")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/xigmatek/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Xigmatek")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/zalman/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Zalman")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/zotac/bilgisayar-bilesenleri/" }
                          },
                          [_vm._v("Zotac")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/bilgisayar-kasasi/" }
                },
                [_vm._v("Bilgisayar Kasaları")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Bilgisayar Kasaları ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/bilgisayar-kasasi/" }
                          },
                          [_vm._v("Tüm Bilgisayar Kasaları")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/asus/bilgisayar-kasasi/" }
                          },
                          [_vm._v("Asus")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/cooler-master/bilgisayar-kasasi/" }
                          },
                          [_vm._v("Cooler Master ")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/corsair/bilgisayar-kasasi/" }
                          },
                          [_vm._v("Corsair")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/cougar/bilgisayar-kasasi/" }
                          },
                          [_vm._v("Cougar")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/everest/bilgisayar-kasasi/" }
                          },
                          [_vm._v("Everest")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/frisby/bilgisayar-kasasi/" }
                          },
                          [_vm._v("Frisby")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/rampage/bilgisayar-kasasi/" }
                          },
                          [_vm._v("Rampage")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/thermaltake/bilgisayar-kasasi/" }
                          },
                          [_vm._v("Thermaltake")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/xigmatek/bilgisayar-kasasi/" }
                          },
                          [_vm._v("Xigmatek")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/zalman/bilgisayar-kasasi/" }
                          },
                          [_vm._v("Zalman")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/anakart/" }
                },
                [_vm._v("Anakart")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Anakartlar ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/anakart/" }
                          },
                          [_vm._v("Tüm Anakartlar")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/asus/anakart/" }
                          },
                          [_vm._v("Asus")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/gigabyte/anakart/" }
                          },
                          [_vm._v("Gigabyte")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/msi/anakart/" }
                          },
                          [_vm._v("MSI")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/islemciler/" }
                },
                [_vm._v("İşlemciler")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm İşlemciler ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/islemciler/" }
                          },
                          [_vm._v("Tüm İşlemciler")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/amd/islemciler/" }
                          },
                          [_vm._v("AMD")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/intel/islemciler/" }
                          },
                          [_vm._v("Intel")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/ekran-kartlari/" }
                },
                [_vm._v("Ekran Kartları ")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Ekran Kartları ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/ekran-kartlari/" }
                          },
                          [_vm._v("Tüm Ekran Kartları")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/asus/ekran-kartlari/" }
                          },
                          [_vm._v("Asus")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/evga/ekran-kartlari/" }
                          },
                          [_vm._v("Evga")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/gigabyte/ekran-kartlari/" }
                          },
                          [_vm._v("Gigabyte")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/msi/ekran-kartlari/" }
                          },
                          [_vm._v("MSI")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/sapphire/ekran-kartlari/" }
                          },
                          [_vm._v("Sapphire")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/zotac/ekran-kartlari/" }
                          },
                          [_vm._v("Zotac")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/bilgisayar-ram-bellek/" }
                },
                [_vm._v("Ram")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Ram ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/bilgisayar-ram-bellek/" }
                          },
                          [_vm._v("Tüm Ram Ürünleri")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/corsair/bilgisayar-ram-bellek/" }
                          },
                          [_vm._v("Corsair")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/crucial/bilgisayar-ram-bellek/" }
                          },
                          [_vm._v("Crucial")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/gskill/bilgisayar-ram-bellek/" }
                          },
                          [_vm._v("Gskill")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/kingston/bilgisayar-ram-bellek/" }
                          },
                          [_vm._v("Kingston")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/hard-disk/" }
                },
                [_vm._v("Hard Disk")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Hard Diskler ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/hard-disk/" }
                          },
                          [_vm._v("Tüm Hard Diskler")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/seagate/hard-disk/" }
                          },
                          [_vm._v("Seagate")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/toshiba/hard-disk/" }
                          },
                          [_vm._v("Toshiba")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/wd/hard-disk/" }
                          },
                          [_vm._v("WD")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/harici-diskler/" }
                },
                [_vm._v("Harici Disk ")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Harici Diskler ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/harici-diskler/" }
                          },
                          [_vm._v("Tüm Harici Diskler")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/seagate/harici-diskler/" }
                          },
                          [_vm._v("Seagate")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/toshiba/harici-diskler/" }
                          },
                          [_vm._v("Toshiba")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/wd/harici-diskler/" }
                          },
                          [_vm._v("WD")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/oem-hazir-sistemler/" }
                },
                [_c("strong", [_vm._v("OEM Hazır Sistemler")])]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link",
                  attrs: { href: "/pc-toplama/" }
                },
                [_c("strong", [_vm._v("PC Toplama")])]
              )
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/sogutma-sistemleri/" }
                },
                [_vm._v("Soğutma Sistemleri ")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Soğutma Sistemleri ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/sogutma-sistemleri/" }
                          },
                          [_vm._v("Tüm Soğutma Sistemleri")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/cooler-master/sogutma-sistemleri/"
                            }
                          },
                          [_vm._v("Cooler Master ")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/corsair/sogutma-sistemleri/" }
                          },
                          [_vm._v("Corsair")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/rampage/sogutma-sistemleri/" }
                          },
                          [_vm._v("Rampage")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/thermaltake/sogutma-sistemleri/" }
                          },
                          [_vm._v("Thermaltake")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/xigmatek/sogutma-sistemleri/" }
                          },
                          [_vm._v("Xigmatek")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/solid-state-disk/" }
                },
                [_vm._v("SSD")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm SDD ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/solid-state-disk/" }
                          },
                          [_vm._v("Tüm SSD Ürünleri")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/corsair/solid-state-disk/" }
                          },
                          [_vm._v("Corsair")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/crucial/solid-state-disk/" }
                          },
                          [_vm._v("Crucial")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/intel/solid-state-disk/" }
                          },
                          [_vm._v("Intel")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/kingston/solid-state-disk/" }
                          },
                          [_vm._v("Kingston")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/ocz/solid-state-disk/" }
                          },
                          [_vm._v("OCZ")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/samsung/solid-state-disk/" }
                          },
                          [_vm._v("Samsung")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/sandisk/solid-state-disk/" }
                          },
                          [_vm._v("Sandisk")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/transcend/solid-state-disk/" }
                          },
                          [_vm._v("Transcend")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/wd/solid-state-disk/" }
                          },
                          [_vm._v("WD")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/bilgisayar-monitorleri/" }
                },
                [_vm._v("Monitörler")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Monitörler ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/bilgisayar-monitorleri/" }
                          },
                          [_vm._v("Tüm Monitörler")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/aoc/bilgisayar-monitorleri/" }
                          },
                          [_vm._v("AOC")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/asus/bilgisayar-monitorleri/" }
                          },
                          [_vm._v("Asus")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/benq/bilgisayar-monitorleri/" }
                          },
                          [_vm._v("BenQ")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/dell/bilgisayar-monitorleri/" }
                          },
                          [_vm._v("Dell")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/hp/bilgisayar-monitorleri/" }
                          },
                          [_vm._v("HP")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/lenovo/bilgisayar-monitorleri/" }
                          },
                          [_vm._v("Lenovo")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/lg/bilgisayar-monitorleri/" }
                          },
                          [_vm._v("LG")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/msi/bilgisayar-monitorleri/" }
                          },
                          [_vm._v("MSI")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/philips/bilgisayar-monitorleri/" }
                          },
                          [_vm._v("Philips")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/rampage/bilgisayar-monitorleri/" }
                          },
                          [_vm._v("Rampage")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/samsung/bilgisayar-monitorleri/" }
                          },
                          [_vm._v("Samsung")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: {
                              href: "/viewsonic/bilgisayar-monitorleri/"
                            }
                          },
                          [_vm._v("Viewsonic")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/klavyeler/" }
                },
                [_vm._v("Klavye")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Klavyeler ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/klavyeler/" }
                          },
                          [_vm._v("Tüm Klavyeler")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/a4-tech/klavyeler/" }
                          },
                          [_vm._v("A4-Tech")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/apple/klavyeler/" }
                          },
                          [_vm._v("Apple")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/asus/klavyeler/" }
                          },
                          [_vm._v("Asus")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/everest/klavyeler/" }
                          },
                          [_vm._v("Everest")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/frisby/klavyeler/" }
                          },
                          [_vm._v("Frisby")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/hp/klavyeler/" }
                          },
                          [_vm._v("Hp")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/inca/klavyeler/" }
                          },
                          [_vm._v("Inca")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/logitech/klavyeler/" }
                          },
                          [_vm._v("Logitech")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/microsoft/klavyeler/" }
                          },
                          [_vm._v("Microsoft")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/rampage/klavyeler/" }
                          },
                          [_vm._v("Rampage")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/razer/klavyeler/" }
                          },
                          [_vm._v("Razer")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/thermaltake/klavyeler/" }
                          },
                          [_vm._v("Thermaltake")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/trust/klavyeler/" }
                          },
                          [_vm._v("Trust")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/bilgisayar-mouse/" }
                },
                [_vm._v("Mouse")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Mouse ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/bilgisayar-mouse/" }
                          },
                          [_vm._v("Tüm Mouse Ürünleri")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/a4-tech/bilgisayar-mouse/" }
                          },
                          [_vm._v("A4-Tech")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/apple/bilgisayar-mouse/" }
                          },
                          [_vm._v("Apple")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/asus/bilgisayar-mouse/" }
                          },
                          [_vm._v("Asus")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/everest/bilgisayar-mouse/" }
                          },
                          [_vm._v("Everest")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/frisby/bilgisayar-mouse/" }
                          },
                          [_vm._v("Frisby")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/hp/bilgisayar-mouse/" }
                          },
                          [_vm._v("HP")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/inca/bilgisayar-mouse/" }
                          },
                          [_vm._v("Inca")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/logitech/bilgisayar-mouse/" }
                          },
                          [_vm._v("Logitech")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/microsoft/bilgisayar-mouse/" }
                          },
                          [_vm._v("Microsoft")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/rampage/bilgisayar-mouse/" }
                          },
                          [_vm._v("Rampage")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/razer/bilgisayar-mouse/" }
                          },
                          [_vm._v("Razer")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/thermaltake/bilgisayar-mouse/" }
                          },
                          [_vm._v("Thermaltake")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/trust/bilgisayar-mouse/" }
                          },
                          [_vm._v("Trust")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/usb-bellek/" }
                },
                [_vm._v("USB Bellek")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/network-urunleri/" }
                },
                [_vm._v("Network Ürünleri ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/modemler/" }
                },
                [_vm._v("Modemler")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/hoparlor-ve-speaker/" }
                },
                [_vm._v("Hoparlör Speaker")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/kesintisiz-guc-kaynaklari/" }
                },
                [_vm._v("Kesintisiz Güç Kaynakları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/guvenlik-antivirus-yazilimlari/" }
                },
                [_vm._v("Güvenlik Yazılımları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/isletim-sistemleri/" }
                },
                [_vm._v("İşletim Sistemleri ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/microsoft-office/" }
                },
                [_vm._v("Microsoft Office Programları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/guc-kaynaklari-power/" }
                },
                [_vm._v("Güç Kaynakları")]
              )
            ])
          ]),
          _c("div", { staticClass: "m-b-30 m-l-45" }, [
            _c(
              "a",
              {
                staticClass:
                  "btn btn-default btn-transparent btn-show-all-pc-product",
                attrs: { href: "/bilgisayar-bilesenleri" }
              },
              [_vm._v("Tüm Bilgisayar Bileşenleri Ürünlerini Gör ")]
            )
          ])
        ]),
        _c("div", { staticClass: "col-lg-3 banner-list-wrapper" }, [
          _c("div", { staticClass: "banner-list" }, [
            _c("div", { staticClass: "banner-list__item" }, [
              _c("a", { attrs: { href: "/oem-hazir-sistemler/" } }, [
                _c("img", {
                  staticClass: "lazyimg",
                  attrs: {
                    "data-src":
                      "https://www.vatanbilgisayar.com/upload/banner/yeni-tasarim/kampanya-banner/oembanner2020-min.jpg",
                    src:
                      "https://www.vatanbilgisayar.com/upload/banner/yeni-tasarim/kampanya-banner/oembanner2020-min.jpg"
                  }
                })
              ])
            ]),
            _c("div", { staticClass: "banner-list__item" }, [
              _c("a", { attrs: { href: "/pc-toplama/" } }, [
                _c("img", {
                  staticClass: "lazyimg lazy-init",
                  attrs: {
                    "data-src":
                      "https://www.vatanbilgisayar.com/upload/banner/yeni-tasarim/anasayfa/pc-toplama.jpg",
                    src:
                      "https://www.vatanbilgisayar.com/upload/banner/yeni-tasarim/anasayfa/pc-toplama.jpg"
                  }
                })
              ])
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "dropdown-menu" }, [
      _c("div", { staticClass: "row" }, [
        _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
          _c("ul", { staticClass: "dropdown-menu-list go-back-wrapper" }, [
            _c("li", { staticClass: "dropdown-menu-list__item" }, [
              _c("a", { staticClass: "go-parent dropdown-menu-list__link" }, [
                _vm._v("Kamera")
              ])
            ])
          ]),
          _c("ul", { staticClass: "dropdown-menu-list" }, [
            _c("li", [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link",
                  attrs: { href: "/fotograf-makinesi-video-kamera" }
                },
                [_vm._v("Tüm Kameralar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/fotograf-makinesi/" }
                },
                [_vm._v("Dijital Kompakt Fotoğraf Makineleri ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/dijital-slr-fotograf-makinesi/" }
                },
                [_vm._v("Dijital SLR Fotoğraf Makineleri ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/video-kamera-modelleri/" }
                },
                [_vm._v("Video Kamera")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/fotograf-makinesi-lensleri/" }
                },
                [_vm._v("Lens ve Aksesuarlar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/aynasiz-sistem-slr-fotograf-makinesi/" }
                },
                [_vm._v("Aynasız Sistem Fotoğraf Makineleri ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/aksiyon-kamerasi/" }
                },
                [_vm._v("Aksiyon Kameraları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/hafiza-karti/" }
                },
                [_vm._v("Hafıza Kartları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/dijital-cerceveler/" }
                },
                [_vm._v("Dijital Çerçeveler ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/araca-ici-kamera/" }
                },
                [_vm._v("Araç İçi Kamera")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/web-camera/" }
                },
                [_vm._v("Web Kamera")]
              )
            ])
          ]),
          _c("div", { staticClass: "m-b-30 m-l-45" }, [
            _c(
              "a",
              {
                staticClass:
                  "btn btn-default btn-transparent btn-show-all-pc-product",
                attrs: { href: "/fotograf-makinesi-video-kamera" }
              },
              [_vm._v("Tüm Kamera Ürünlerini Gör ")]
            )
          ])
        ]),
        _c("div", { staticClass: "col-lg-3 banner-list-wrapper" }, [
          _c("div", { staticClass: "banner-list" }, [
            _c("div", { staticClass: "banner-list__item" }, [
              _c("img", {
                staticClass: "lazyimg",
                attrs: {
                  "data-src":
                    "https://www.vatanbilgisayar.com/Upload/GENERAL/menu-banner/camera.jpg",
                  src:
                    "https://www.vatanbilgisayar.com/Upload/GENERAL/menu-banner/camera.jpg"
                }
              })
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "dropdown-menu" }, [
      _c("div", { staticClass: "row" }, [
        _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
          _c("ul", { staticClass: "dropdown-menu-list go-back-wrapper" }, [
            _c("li", { staticClass: "dropdown-menu-list__item" }, [
              _c("a", { staticClass: "go-parent dropdown-menu-list__link" }, [
                _vm._v(" TV & Ev Elektroniği ")
              ])
            ])
          ]),
          _c("ul", { staticClass: "dropdown-menu-list" }, [
            _c("li", [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link",
                  attrs: { href: "/tv-ev-elektronigi/" }
                },
                [_vm._v("Tüm Tv & Ev Elektroniği")]
              )
            ]),
            _c("li", { staticClass: "dropdown-menu-list__item second-child" }, [
              _c(
                "a",
                {
                  staticClass: "dropdown-menu-list__link",
                  attrs: { href: "/televizyon/" }
                },
                [_vm._v("Televizyonlar ")]
              ),
              _c("div", { staticClass: "dropdown-menu" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
                    _c(
                      "ul",
                      { staticClass: "dropdown-menu-list go-back-wrapper" },
                      [
                        _c("li", { staticClass: "dropdown-menu-list__item" }, [
                          _c(
                            "a",
                            {
                              staticClass: "go-parent dropdown-menu-list__link"
                            },
                            [_vm._v(" Tüm Televizyonlar ")]
                          )
                        ])
                      ]
                    ),
                    _c("ul", { staticClass: "dropdown-menu-list" }, [
                      _c("li", [
                        _c(
                          "a",
                          {
                            staticClass: "magic-parent-link",
                            attrs: { href: "/televizyon/" }
                          },
                          [_vm._v("Tüm Televizyonlar")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/axen/televizyon/" }
                          },
                          [_vm._v("Axen")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/grundig/televizyon/" }
                          },
                          [_vm._v("Grundig")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/lg/televizyon/" }
                          },
                          [_vm._v("LG")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/philips/televizyon/" }
                          },
                          [_vm._v("Philips")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/samsung/televizyon/" }
                          },
                          [_vm._v("Samsung")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/seg/televizyon/" }
                          },
                          [_vm._v("Seg")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/sony/televizyon/" }
                          },
                          [_vm._v("Sony")]
                        )
                      ]),
                      _c("li", { staticClass: "dropdown-menu-list__item" }, [
                        _c(
                          "a",
                          {
                            staticClass:
                              "dropdown-menu-list__link special-menu-link",
                            attrs: { href: "/vestel/televizyon/" }
                          },
                          [_vm._v("Vestel")]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/led-tv/" }
                },
                [_vm._v("LED TV")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/oled-tv/" }
                },
                [_vm._v("OLED TV")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/projeksiyon-cihazlari/" }
                },
                [_vm._v("Projeksiyon")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/dvd-ev-sinema-sistemleri/" }
                },
                [_vm._v("DVD ve Ev Sinema Sistemleri")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/uydu-sistemleri/" }
                },
                [_vm._v("Uydu Alıcısı ve Receiver")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/aski-aparatlari/" }
                },
                [_vm._v("TV Askı Aparatı")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/drone/" }
                },
                [_vm._v("Drone")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/hoverboard/" }
                },
                [_vm._v("Hoverboard")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/smart-home/" }
                },
                [_vm._v("Akıllı Ev Sistemleri")]
              )
            ])
          ]),
          _c("div", { staticClass: "m-b-30 m-l-45" }, [
            _c(
              "a",
              {
                staticClass:
                  "btn btn-default btn-transparent btn-show-all-pc-product",
                attrs: { href: "/tv-ev-elektronigi" }
              },
              [_vm._v("Tüm TV & Ev Elektroniği Ürünlerini Gör ")]
            )
          ])
        ]),
        _c("div", { staticClass: "col-lg-3 banner-list-wrapper" }, [
          _c("div", { staticClass: "banner-list" }, [
            _c("div", { staticClass: "banner-list__item" }, [
              _c("img", {
                staticClass: "lazyimg",
                attrs: {
                  "data-src":
                    "https://www.vatanbilgisayar.com/Upload/GENERAL/menu-banner/televizyon.jpg",
                  src:
                    "https://www.vatanbilgisayar.com/Upload/GENERAL/menu-banner/televizyon.jpg"
                }
              })
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "dropdown-menu" }, [
      _c("div", { staticClass: "row" }, [
        _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
          _c("ul", { staticClass: "dropdown-menu-list go-back-wrapper" }, [
            _c("li", { staticClass: "dropdown-menu-list__item" }, [
              _c("a", { staticClass: "go-parent dropdown-menu-list__link" }, [
                _vm._v("Ofis")
              ])
            ])
          ]),
          _c("ul", { staticClass: "dropdown-menu-list" }, [
            _c("li", [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link",
                  attrs: { href: "/ofis-malzemeleri/" }
                },
                [_vm._v("Tüm Ofis Ürünleri")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/kirtasiye/" }
                },
                [_vm._v("Kırtasiye")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/yazici/" }
                },
                [_vm._v("Yazıcılar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/tarayicilar/" }
                },
                [_vm._v("Tarayıcılar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/hesap-makinesi/" }
                },
                [_vm._v("Hesap Makinesi ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/yazici-aksesuar/" }
                },
                [_vm._v("Evrak İmha Makineleri ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/ozel-kagitlar/" }
                },
                [_vm._v("Kağıt")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/kartus/" }
                },
                [_vm._v("Kartuş")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/toner/" }
                },
                [_vm._v("Toner")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/serit/" }
                },
                [_vm._v("Şerit")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/projeksiyon-cihazlari/" }
                },
                [_vm._v("Projeksiyon Cihazları")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/etiket-yazicilari/" }
                },
                [_vm._v("Etiket Yazıcıları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/microsoft-office/" }
                },
                [_vm._v("Microsoft Office Programları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/program-kitaplari/" }
                },
                [_vm._v("Program Kitapları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/cd-dvd/" }
                },
                [_vm._v("CD & DVD")]
              )
            ]),
            _c("li", [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/kablolu-ev-telefonlari/" }
                },
                [_vm._v("Kablolu Ev Telefonları")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/kablosuz-telefon-modelleri/" }
                },
                [_vm._v("Kablosuz Telefonlar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/filament/" }
                },
                [_vm._v("Filament")]
              )
            ])
          ]),
          _c("div", { staticClass: "m-b-30 m-l-45" }, [
            _c(
              "a",
              {
                staticClass:
                  "btn btn-default btn-transparent btn-show-all-pc-product",
                attrs: { href: "/ofis-malzemeleri" }
              },
              [_vm._v("Tüm Ofis Ürünlerini Gör ")]
            )
          ])
        ]),
        _c("div", { staticClass: "col-lg-3 banner-list-wrapper" }, [
          _c("div", { staticClass: "banner-list" }, [
            _c("div", { staticClass: "banner-list__item" }, [
              _c("img", {
                staticClass: "lazyimg",
                attrs: {
                  "data-src":
                    "https://www.vatanbilgisayar.com/Upload/GENERAL/menu-banner/yazici.jpg",
                  src:
                    "https://www.vatanbilgisayar.com/Upload/GENERAL/menu-banner/yazici.jpg"
                }
              })
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "dropdown-menu" }, [
      _c("div", { staticClass: "row" }, [
        _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
          _c("ul", { staticClass: "dropdown-menu-list go-back-wrapper" }, [
            _c("li", { staticClass: "dropdown-menu-list__item" }, [
              _c("a", { staticClass: "go-parent dropdown-menu-list__link" }, [
                _vm._v("Aksesuarlar")
              ])
            ])
          ]),
          _c("ul", { staticClass: "dropdown-menu-list" }, [
            _c("li", [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link",
                  attrs: { href: "/aksesuarlar/" }
                },
                [_vm._v("Tüm Aksesuarlar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/telefon-kiliflari/" }
                },
                [_vm._v("Telefon Kılıfları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/kablolar/" }
                },
                [_vm._v("Kablolar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/bluetooth-kulaklik-mikrofon/" }
                },
                [_vm._v("Kulaklıklar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/ekran-koruyucu/" }
                },
                [_vm._v("Ekran Koruyucular ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/piller-ve-sarj-aletleri/" }
                },
                [_vm._v("Pil ve Şarj Cihazları")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/cantalar-kiliflar/" }
                },
                [_vm._v("Çanta ve Kılıflar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/mp3-calar/" }
                },
                [_vm._v("MP3 Çalarlar ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/3d-gozlukler/" }
                },
                [_vm._v("3D Gözlükler ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/bataryalar/" }
                },
                [_vm._v("Bataryalar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/oto-ses-sistemleri/" }
                },
                [_vm._v("Oto Ses Sistemleri ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/navigasyon-cihazlari/" }
                },
                [_vm._v("Navigasyon Cihazları")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/muzik-aletleri/" }
                },
                [_vm._v("Müzik Aletleri ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/ses-kayit-cihazlari/" }
                },
                [_vm._v("Ses Kayıt Cihazları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/grafik-tabletler/" }
                },
                [_vm._v("Grafik Tabletler ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/aydinlatma-urunleri-2/" }
                },
                [_vm._v("Aydınlatıcılar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/baglanti-cihazlari-ve-ceviriciler/" }
                },
                [_vm._v("Bağlantı Cihazları ve Çeviriciler")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/kart-okuyucular/" }
                },
                [_vm._v("Kart Okuyucular")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/kumandalar/" }
                },
                [_vm._v("Kumandalar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/mouse-pad/" }
                },
                [_vm._v("Mouse Pad")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/notebook-stand-ve-sogutucular/" }
                },
                [_vm._v("Notebook Soğutucu")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/oyun-kollari-ve-direksiyonlar/" }
                },
                [_vm._v("Oyun Kolları ve Direksiyonlar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/prizler/" }
                },
                [_vm._v("Prizler")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/tablet-kalemleri/" }
                },
                [_vm._v("Tablet Kalemleri")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/bilgisayar-temizlik-urunleri/" }
                },
                [_vm._v("Temizlik Ürünleri")]
              )
            ])
          ]),
          _c("div", { staticClass: "m-b-30 m-l-45" }, [
            _c(
              "a",
              {
                staticClass:
                  "btn btn-default btn-transparent btn-show-all-pc-product",
                attrs: { href: "/aksesuarlar" }
              },
              [_vm._v("Tüm Aksesuar Ürünlerini Gör")]
            )
          ])
        ]),
        _c("div", { staticClass: "col-lg-3 banner-list-wrapper" }, [
          _c("div", { staticClass: "banner-list" }, [
            _c("div", { staticClass: "banner-list__item" }, [
              _c("img", {
                staticClass: "lazyimg",
                attrs: {
                  "data-src":
                    "https://www.vatanbilgisayar.com/Upload/GENERAL/menu-banner/aksesuar.jpg",
                  src:
                    "https://www.vatanbilgisayar.com/Upload/GENERAL/menu-banner/aksesuar.jpg"
                }
              })
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "dropdown-menu" }, [
      _c("div", { staticClass: "row" }, [
        _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
          _c("ul", { staticClass: "dropdown-menu-list go-back-wrapper" }, [
            _c("li", { staticClass: "dropdown-menu-list__item" }, [
              _c("a", { staticClass: "go-parent dropdown-menu-list__link" }, [
                _vm._v("Hobi")
              ])
            ])
          ]),
          _c("ul", { staticClass: "dropdown-menu-list" }, [
            _c("li", [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link",
                  attrs: { href: "/oyun-hobi" }
                },
                [_vm._v("Tüm Oyun Ürünleri")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/oyun-konsollari/" }
                },
                [_vm._v("Tüm Oyun Konsolları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/ps4-oyun/" }
                },
                [_vm._v("PS4 Oyun Konsolu ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/xbox-one/" }
                },
                [_vm._v("XBOX Oyun Konsolu")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/oyunlar/" }
                },
                [_vm._v("Tüm Oyunlar ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/oyun-kollari/" }
                },
                [_vm._v("Tüm Oyun Kolları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/sony/oyun-kollari/" }
                },
                [_vm._v("Playstation Oyun Kolları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/microsoft/oyun-kollari/" }
                },
                [_vm._v("XBOX Oyun Kolları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/yeni-urunler/oyunlar/" }
                },
                [_vm._v("Yeni Çıkan Oyunlar ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/oyun-kulakligi/" }
                },
                [_vm._v("Gaming Kulaklık ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/gaming-mouse/" }
                },
                [_vm._v("Gaming Mouse ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/gaming-klavye/" }
                },
                [_vm._v("Gaming Klavye ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/oyuncu-koltuklari/" }
                },
                [_vm._v("Oyuncu Koltukları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/robotik-kodlama/" }
                },
                [_vm._v("Robotik Kodlama")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/gamepass/" }
                },
                [_vm._v("Game Pass")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/egitici-oyunlar/" }
                },
                [_vm._v("Eğitici Oyunlar")]
              )
            ])
          ]),
          _c("div", { staticClass: "m-b-30 m-l-45" }, [
            _c(
              "a",
              {
                staticClass:
                  "btn btn-default btn-transparent btn-show-all-pc-product",
                attrs: { href: "/oyun-hobi" }
              },
              [_vm._v("Tüm Oyun Ürünlerini Gör")]
            )
          ])
        ]),
        _c("div", { staticClass: "col-lg-3 banner-list-wrapper" }, [
          _c("div", { staticClass: "banner-list" }, [
            _c("div", { staticClass: "banner-list__item" }, [
              _c("img", {
                staticClass: "lazyimg",
                attrs: {
                  "data-src":
                    "https://www.vatanbilgisayar.com/Upload/GENERAL/menu-banner/gaming.jpg",
                  src:
                    "https://www.vatanbilgisayar.com/Upload/GENERAL/menu-banner/gaming.jpg"
                }
              })
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "dropdown-menu" }, [
      _c("div", { staticClass: "row" }, [
        _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
          _c("ul", { staticClass: "dropdown-menu-list go-back-wrapper" }, [
            _c("li", { staticClass: "dropdown-menu-list__item" }, [
              _c("a", { staticClass: "go-parent dropdown-menu-list__link" }, [
                _vm._v("Ev Aletleri")
              ])
            ])
          ]),
          _c("ul", { staticClass: "dropdown-menu-list" }, [
            _c("li", [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link",
                  attrs: { href: "/elektrikli-ev-aletleri/" }
                },
                [_vm._v("Tüm Ev Aletleri")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/elektrikli-ev-aletleri/" }
                },
                [_c("b", [_vm._v("Tüm Elektrikli Ev Aletleri")])]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/kisisel-bakim-urunleri/" }
                },
                [_c("b", [_vm._v("Tüm Kişisel Bakım Ürünleri")])]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/mutfak-urunleri/" }
                },
                [_c("b", [_vm._v("Tüm Mutfak Aletleri ")])]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/elektrikli-supurgeler/" }
                },
                [_vm._v("Elektrikli Süpürge")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/tiras-makineleri/" }
                },
                [_vm._v("Tıraş Makineleri ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/blender/" }
                },
                [_vm._v("Blenderlar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/isiticilar/" }
                },
                [_vm._v("Isıtıcılar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/epilasyon-aletleri" }
                },
                [_vm._v("Epilasyon Aletleri")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/cay-makineleri/" }
                },
                [_vm._v("Çay Makineleri")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/utuler/" }
                },
                [_vm._v("Ütü")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/sac-kurutma-makineleri/" }
                },
                [_vm._v("Saç Kurutma Makineleri")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/tost-makineleri/" }
                },
                [_vm._v("Tost Makineleri")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/sac-sekillendirme-setleri/" }
                },
                [_vm._v("Saç Şekillendirme Setleri ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/su-isitici/" }
                },
                [_vm._v("Su Isıtıcıları ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/klima/" }
                },
                [_vm._v("Klima")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/agiz-ve-dis-bakim-urunleri/" }
                },
                [_vm._v("Ağız ve Diş Bakım Ürünleri ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/meyve-sikacagi/" }
                },
                [_vm._v("Meyve Sıkacağı ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/vantilator/" }
                },
                [_vm._v("Vantilatör")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/turk-kahve-makineleri/" }
                },
                [_vm._v("Türk Kahve Makineleri")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/sarjli-dis-fircalari/" }
                },
                [_vm._v("Şarjlı Diş Fırçaları")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/espresso-makineleri/" }
                },
                [_vm._v("Espresso Makineleri")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/sac-duzlestiriciler/" }
                },
                [_vm._v("Saç Düzleştiriciler")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/filtre-kahve-makineleri/" }
                },
                [_vm._v("Filtre Kahve Makineleri")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/mikrodalga-firinlar/" }
                },
                [_vm._v("Mikrodalga Fırınlar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/surahiler/" }
                },
                [_vm._v("Sürahiler")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/sakal-sekillendirme-makineleri/" }
                },
                [_vm._v("Sakal Şekillendirme Makineleri")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/tartilar/" }
                },
                [_vm._v("Tartılar")]
              )
            ])
          ]),
          _c("div", { staticClass: "m-b-30 m-l-45" }, [
            _c(
              "a",
              {
                staticClass:
                  "btn btn-default btn-transparent btn-show-all-pc-product",
                attrs: { href: "/ev-aletleri-kisisel-bakim" }
              },
              [_vm._v("Tüm Ev Aletleri Ürünlerini Gör ")]
            )
          ])
        ]),
        _c("div", { staticClass: "col-lg-3 banner-list-wrapper" }, [
          _c("div", { staticClass: "banner-list" }, [
            _c("div", { staticClass: "banner-list__item" }, [
              _c("img", {
                staticClass: "lazyimg",
                attrs: {
                  "data-src":
                    "https://www.vatanbilgisayar.com/Upload/GENERAL/menu-banner/kea.jpg",
                  src:
                    "https://www.vatanbilgisayar.com/Upload/GENERAL/menu-banner/kea.jpg"
                }
              })
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "dropdown-menu" }, [
      _c("div", { staticClass: "row" }, [
        _c("div", { staticClass: "menu-wrapper col-lg-9" }, [
          _c("ul", { staticClass: "dropdown-menu-list go-back-wrapper" }, [
            _c("li", { staticClass: "dropdown-menu-list__item" }, [
              _c("a", { staticClass: "go-parent dropdown-menu-list__link" }, [
                _vm._v("Spor")
              ])
            ])
          ]),
          _c("ul", { staticClass: "dropdown-menu-list" }, [
            _c("li", [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link",
                  attrs: { href: "/spor-aletleri/" }
                },
                [_vm._v("Tüm Spor Ürünleri")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/kosu-bandi/" }
                },
                [_vm._v("Koşu Bandı")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/kamp-urunleri/" }
                },
                [_vm._v("Kamp Ürünleri ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/kondisyon-bisikletleri/" }
                },
                [_vm._v("Kondisyon Bisikletleri")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/spor-giyim/" }
                },
                [_vm._v("Giyim")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/vucut-gelistirme-aletleri/" }
                },
                [_vm._v("Vücut Geliştirme Aletleri ")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/spor-ayakkabi/" }
                },
                [_vm._v("Ayakkabılar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/bisiklet/" }
                },
                [_vm._v("Bisikletler")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/pilates-yoga-urunleri/" }
                },
                [_vm._v("Pilates/Yoga Ürünleri")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/deniz-havuz-urunleri/" }
                },
                [_vm._v("Deniz/Havuz Ürünleri")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/toplar/" }
                },
                [_vm._v("Toplar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/canta-ve-bavullar/" }
                },
                [_vm._v("Çanta ve Bavullar")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/bireysel-takim-sporlari/" }
                },
                [_vm._v("Bireysel/Takım Sporları")]
              )
            ]),
            _c("li", { staticClass: "no-brand-li" }, [
              _c(
                "a",
                {
                  staticClass: "magic-parent-link normal-nav-link no-brand",
                  attrs: { href: "/spor-saatleri" }
                },
                [_vm._v("Spor Saatleri ")]
              )
            ])
          ]),
          _c("div", { staticClass: "m-b-30 m-l-45" }, [
            _c(
              "a",
              {
                staticClass:
                  "btn btn-default btn-transparent btn-show-all-pc-product",
                attrs: { href: "/spor-aletleri" }
              },
              [_vm._v("Tüm Spor Ürünlerini Gör")]
            )
          ])
        ]),
        _c("div", { staticClass: "col-lg-3 banner-list-wrapper" }, [
          _c("div", { staticClass: "banner-list" }, [
            _c("div", { staticClass: "banner-list__item" }, [
              _c("img", {
                staticClass: "lazyimg",
                attrs: {
                  "data-src":
                    "https://www.vatanbilgisayar.com/Upload/GENERAL/menu-banner/spor.jpg",
                  src:
                    "https://www.vatanbilgisayar.com/Upload/GENERAL/menu-banner/spor.jpg"
                }
              })
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("li", { staticClass: "static-pages-links auth-link" }, [
      _c(
        "a",
        {
          staticClass: "topbar-menu__link",
          attrs: { href: "/uyeBilgi/siparistakip" }
        },
        [
          _c("span", { staticClass: "topbar-menu__text" }, [
            _vm._v("Siparişlerim")
          ])
        ]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("li", { staticClass: "static-pages-links auth-link" }, [
      _c(
        "a",
        {
          staticClass: "topbar-menu__link",
          attrs: { href: "/uyeBilgi/favorilistem" }
        },
        [
          _c("span", { staticClass: "topbar-menu__text" }, [
            _vm._v("Favorilerim")
          ])
        ]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("li", { staticClass: "static-pages-links" }, [
      _c(
        "a",
        { staticClass: "topbar-menu__link", attrs: { href: "/pc-toplama" } },
        [
          _c("span", { staticClass: "topbar-menu__text" }, [
            _vm._v("PC Toplama")
          ])
        ]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("li", { staticClass: "static-pages-links" }, [
      _c(
        "a",
        { staticClass: "topbar-menu__link", attrs: { href: "/hakkimizda" } },
        [_c("span", { staticClass: "topbar-menu__text" }, [_vm._v("Kurumsal")])]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("li", { staticClass: "static-pages-links" }, [
      _c(
        "a",
        { staticClass: "topbar-menu__link", attrs: { href: "/outlet" } },
        [_c("span", { staticClass: "topbar-menu__text" }, [_vm._v("Outlet")])]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("li", { staticClass: "static-pages-links" }, [
      _c(
        "a",
        { staticClass: "topbar-menu__link", attrs: { href: "/magazalar" } },
        [
          _c("span", { staticClass: "topbar-menu__text" }, [
            _vm._v("Mağazalar")
          ])
        ]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("li", { staticClass: "static-pages-links" }, [
      _c(
        "a",
        {
          staticClass: "topbar-menu__link",
          attrs: { href: "/servis-takip-formu" }
        },
        [
          _c("span", { staticClass: "topbar-menu__text" }, [
            _vm._v("Servis Takip Formu")
          ])
        ]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("li", { staticClass: "static-pages-links" }, [
      _c(
        "a",
        { staticClass: "topbar-menu__link", attrs: { href: "/iletisim" } },
        [
          _c("span", { staticClass: "topbar-menu__text" }, [
            _vm._v("Bize Ulaşın")
          ])
        ]
      )
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}