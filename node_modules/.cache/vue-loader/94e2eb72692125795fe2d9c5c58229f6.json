{"remainingRequest":"C:\\Users\\Slyleight\\Desktop\\Vatan-vue-vue-vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Slyleight\\Desktop\\Vatan-vue-vue-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Slyleight\\Desktop\\Vatan-vue-vue-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Slyleight\\Desktop\\Vatan-vue-vue-vue\\src\\components\\Comments.vue?vue&type=template&id=5847e424&","dependencies":[{"path":"C:\\Users\\Slyleight\\Desktop\\Vatan-vue-vue-vue\\src\\components\\Comments.vue","mtime":1604790706791},{"path":"C:\\Users\\Slyleight\\Desktop\\Vatan-vue-vue-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604668081097},{"path":"C:\\Users\\Slyleight\\Desktop\\Vatan-vue-vue-vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1604668125019},{"path":"C:\\Users\\Slyleight\\Desktop\\Vatan-vue-vue-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604668081097},{"path":"C:\\Users\\Slyleight\\Desktop\\Vatan-vue-vue-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1604668125011}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}