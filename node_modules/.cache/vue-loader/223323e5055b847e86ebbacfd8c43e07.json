{"remainingRequest":"E:\\Ders\\Vue\\VatanVueWeb\\VatanBilgisayarVueApp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Ders\\Vue\\VatanVueWeb\\VatanBilgisayarVueApp\\src\\components\\GununFirsatlari.vue?vue&type=template&id=35a8cd1c&","dependencies":[{"path":"E:\\Ders\\Vue\\VatanVueWeb\\VatanBilgisayarVueApp\\src\\components\\GununFirsatlari.vue","mtime":1604487584331},{"path":"E:\\Ders\\Vue\\VatanVueWeb\\VatanBilgisayarVueApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Ders\\Vue\\VatanVueWeb\\VatanBilgisayarVueApp\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\Ders\\Vue\\VatanVueWeb\\VatanBilgisayarVueApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Ders\\Vue\\VatanVueWeb\\VatanBilgisayarVueApp\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}