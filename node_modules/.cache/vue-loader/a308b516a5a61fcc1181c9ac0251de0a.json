{"remainingRequest":"E:\\Ders\\Vue\\VatanVueWeb\\vatanbilgisayarvueapp\\vatan-bilgisayar-vue-app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Ders\\Vue\\VatanVueWeb\\vatanbilgisayarvueapp\\vatan-bilgisayar-vue-app\\src\\components\\productImagenInfo.vue?vue&type=template&id=6595ac30&","dependencies":[{"path":"E:\\Ders\\Vue\\VatanVueWeb\\vatanbilgisayarvueapp\\vatan-bilgisayar-vue-app\\src\\components\\productImagenInfo.vue","mtime":1604854413275},{"path":"E:\\Ders\\Vue\\VatanVueWeb\\vatanbilgisayarvueapp\\vatan-bilgisayar-vue-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604495126881},{"path":"E:\\Ders\\Vue\\VatanVueWeb\\vatanbilgisayarvueapp\\vatan-bilgisayar-vue-app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1604495239772},{"path":"E:\\Ders\\Vue\\VatanVueWeb\\vatanbilgisayarvueapp\\vatan-bilgisayar-vue-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604495126881},{"path":"E:\\Ders\\Vue\\VatanVueWeb\\vatanbilgisayarvueapp\\vatan-bilgisayar-vue-app\\node_modules\\vue-loader\\lib\\index.js","mtime":1604495239772}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}